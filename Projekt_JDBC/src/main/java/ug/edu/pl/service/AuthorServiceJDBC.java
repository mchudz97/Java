package ug.edu.pl.service;

import ug.edu.pl.domain.Author;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class AuthorServiceJDBC implements AuthorService {
    private final String DB_URL="jdbc:hsqldb:hsql://localhost/workdb";
    private final String CREATE_IF_NOT_EXIST="CREATE TABLE IF NOT EXISTS AUTHOR (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY," +
            " name VARCHAR(50) DEFAULT NULL, pername VARCHAR(50) DEFAULT NULL, birthdate DATE DEFAULT NULL)";
    private final String INSERT_AUTHOR ="INSERT INTO AUTHOR(name, pername, birthdate) VALUES (?,?,?)";
    private final String SELECT_AUTHOR="SELECT * FROM AUTHOR";
    private final String DELETE_BY_ID="DELETE FROM AUTHOR WHERE id=?";
    private final String UPDATE_BY_ID="UPDATE AUTHOR SET name=?, pername=?, birthdate=? WHERE id=? ";
    private final String DROP_TABLE="DROP TABLE IF EXISTS AUTHOR";
    private Connection con;
    private PreparedStatement insertA;
    private PreparedStatement selectA;
    private PreparedStatement deleteA;
    private PreparedStatement updateA;
    private PreparedStatement dropA;



    public AuthorServiceJDBC(){
        try {
            con = DriverManager.getConnection(DB_URL);
            PreparedStatement createTableAuthor = con.prepareStatement(CREATE_IF_NOT_EXIST);
            createTableAuthor.executeUpdate();

            insertA=con.prepareStatement(INSERT_AUTHOR);
            selectA=con.prepareStatement(SELECT_AUTHOR);
            updateA=con.prepareStatement(UPDATE_BY_ID);
            deleteA=con.prepareStatement(DELETE_BY_ID);
            dropA=con.prepareStatement(DROP_TABLE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public void updateAuthor(int idA, Author a){
        try {

            updateA.setString(1, a.getName());
            updateA.setString(2, a.getPername());
            updateA.setString(3, a.getDate());
            updateA.setString(4,  Integer.toString(idA));
            updateA.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }


    }
    public void deleteAuthor(int idB) {
        try {


        deleteA.setString(1, Integer.toString(idB));
        deleteA.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int dropAuthor(){
        try {
            int i=dropA.executeUpdate();
            return i;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    public int addAuthor(Author a) {
        try {
            insertA.setString(1, a.getName());
            insertA.setString(2, a.getPername());
            insertA.setString(3, a.getDate());
            int affected=insertA.executeUpdate();
            return affected;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    public List<Author> getAuthors() {

        try {
            List<Author> result= new ArrayList<Author>(0);
            ResultSet rs = selectA.executeQuery();
            while(rs.next()){
                int id= rs.getInt("id");
                String name= rs.getString("name");
                String pername= rs.getString("pername");
                String birthdate= rs.getDate("birthdate").toString();
                String[] parts = birthdate.split("-");
                result.add(new Author(id, name, pername, Integer.parseInt(parts[2]), Integer.parseInt(parts[1]), Integer.parseInt(parts[0])));
            }
            rs.close();
            return result;
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    public int addAuthors(List<Author> authors) {

        try {
            int affected=0;
            con.setAutoCommit(false);
            for (Author a:authors) {
               affected+= this.addAuthor(a);
            }
            con.commit();
            con.setAutoCommit(true);
            return affected;
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

            e.printStackTrace();
        }
        return 0;
    }
}
